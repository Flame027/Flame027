%PASSED Output from Splint 3.1.2
%LCLimports 
%LCLSortTable
%LCLsort bool immutable nil nil
%LCLsort Bool synonym bool nil
%LCLsort int primitive nil nil
%LCLsort char primitive nil nil
%LCLsort void primitive nil nil
%LCLsort _char_Obj obj char nil
%LCLsort __char_Obj_Ptr ptr _char_Obj nil
%LCLsort __char_Obj_Arr arr _char_Obj nil
%LCLsort _char_Vec vec char __char_Obj_Arr
%LCLsort float primitive nil nil
%LCLsort double primitive nil nil
%LCLsort _eenum0e_Enum enum eenum0e nil
%LCLsort three enumMem nil nil
%LCLsort two enumMem nil nil
%LCLsort one enumMem nil nil
%LCLsort enumEnd nil nil nil
%LCLsort _etype synonym _eenum0e_Enum nil
%LCLsort _eenum1e_Enum enum eenum1e nil
%LCLsort dos enumMem nil nil
%LCLsort uno enumMem nil nil
%LCLsort cero enumMem nil nil
%LCLsort enumEnd nil nil nil
%LCLsort _stype synonym _eenum1e_Enum nil
%LCLsort __ietag_Enum enum _ietag nil
%LCLsort siete enumMem nil nil
%LCLsort enumEnd nil nil nil
%LCLsort _itype synonym __ietag_Enum nil
%LCLsort _senum0s_Struct str senum0s nil
%LCLsort b strMem _int_Obj nil
%LCLsort a strMem _int_Obj nil
%LCLsort strEnd nil nil nil
%LCLsort _int_Obj obj int nil
%LCLsort _senum0s_Struct_Tuple tup _senum0s_Struct nil
%LCLsort __senum0s_Struct_Ptr ptr _senum0s_Struct nil
%LCLsort __senum0s_Struct_Arr arr _senum0s_Struct nil
%LCLsort __senum0s_Struct_Tuple_Vec vec _senum0s_Struct_Tuple __senum0s_Struct_Arr
%LCLsort _st synonym _senum0s_Struct nil
%LCLsort _senum1s_Struct str senum1s nil
%LCLsort c strMem _int_Obj nil
%LCLsort b strMem _int_Obj nil
%LCLsort a strMem _int_Obj nil
%LCLsort strEnd nil nil nil
%LCLsort _senum1s_Struct_Tuple tup _senum1s_Struct nil
%LCLsort __senum1s_Struct_Ptr ptr _senum1s_Struct nil
%LCLsort __senum1s_Struct_Arr arr _senum1s_Struct nil
%LCLsort __senum1s_Struct_Tuple_Vec vec _senum1s_Struct_Tuple __senum1s_Struct_Arr
%LCLsort _st2 synonym _senum1s_Struct nil
%LCLsort _eenum2e_Enum enum eenum2e nil
%LCLsort yasta enumMem nil nil
%LCLsort pasta enumMem nil nil
%LCLsort hasta enumMem nil nil
%LCLsort enumEnd nil nil nil
%LCLSortTableEnd
%LCLSymbolTable
%LCLop mod :int, int -> int
%LCLop min :int, int -> int
%LCLop max :int, int -> int
%LCLop 0 : -> int
%LCLop 0 : -> double
%LCLop 1 : -> int
%LCLop 1 : -> double
%LCLop if __ then __ else __  :bool, bool, bool -> bool
%LCLop if __ then __ else __  :bool, int, int -> int
%LCLop if __ then __ else __  :bool, double, double -> double
%LCLop if __ then __ else __  :bool, _char_Vec, _char_Vec -> _char_Vec
%LCLop if __ then __ else __  :bool, char, char -> char
%LCLop __ < __  :int, int -> bool
%LCLop __ < __  :double, double -> bool
%LCLop empty : -> _char_Vec
%LCLop __ > __  :int, int -> bool
%LCLop __ > __  :double, double -> bool
%LCLop count :char, _char_Vec -> int
%LCLop head :_char_Vec -> char
%LCLop __ \inv :double -> double
%LCLop init :_char_Vec -> _char_Vec
%LCLop isEmpty :_char_Vec -> bool
%LCLop last :_char_Vec -> char
%LCLop len :_char_Vec -> int
%LCLop __ \implies __  :bool, bool -> bool
%LCLop prefix :_char_Vec, int -> _char_Vec
%LCLop __ / __  :double, double -> double
%LCLop removePrefix :_char_Vec, int -> _char_Vec
%LCLop substring :_char_Vec, int, int -> _char_Vec
%LCLop __ || __  :_char_Vec, _char_Vec -> _char_Vec
%LCLop tail :_char_Vec -> _char_Vec
%LCLop __ \in __  :char, _char_Vec -> bool
%LCLop nullTerminated :_char_Vec -> bool
%LCLop throughNull :_char_Vec -> _char_Vec
%LCLop sameStr :_char_Vec, _char_Vec -> bool
%LCLop lenStr :_char_Vec -> int
%LCLop times10plus :int, int -> int
%LCLop plus1 :int -> int
%LCLop 2 : -> int
%LCLop 3 : -> int
%LCLop 4 : -> int
%LCLop 5 : -> int
%LCLop 6 : -> int
%LCLop 7 : -> int
%LCLop 8 : -> int
%LCLop 9 : -> int
%LCLop one : -> _eenum0e_Enum
%LCLop two : -> _eenum0e_Enum
%LCLop three : -> _eenum0e_Enum
%LCLop cero : -> _eenum1e_Enum
%LCLop __ * __  :int, int -> int
%LCLop __ * __  :double, double -> double
%LCLop uno : -> _eenum1e_Enum
%LCLop dos : -> _eenum1e_Enum
%LCLop true : -> bool
%LCLop false : -> bool
%LCLop __ \and __  :bool, bool -> bool
%LCLtag _ietag enum
%LCLop siete : -> __ietag_Enum
%LCLop __ \or __  :bool, bool -> bool
%LCLop __ \eq __  :bool, bool -> bool
%LCLop __ \eq __  :int, int -> bool
%LCLop __ \eq __  :double, double -> bool
%LCLop __ \eq __  :_char_Vec, _char_Vec -> bool
%LCLop __ \eq __  :char, char -> bool
%LCLop \not __  :bool -> bool
%LCLop __ \neq __  :bool, bool -> bool
%LCLop __ \neq __  :int, int -> bool
%LCLop __ \neq __  :double, double -> bool
%LCLop __ \neq __  :_char_Vec, _char_Vec -> bool
%LCLop __ \neq __  :char, char -> bool
%LCLop { __ } :char -> _char_Vec
%LCLop [__, __] :int, int -> _senum0s_Struct_Tuple
%LCLop __ [] :__char_Obj_Ptr -> __char_Obj_Arr
%LCLop __ [] :__senum0s_Struct_Ptr -> __senum0s_Struct_Arr
%LCLop __ [] :__senum1s_Struct_Ptr -> __senum1s_Struct_Arr
%LCLop __ |- __  :_char_Vec, char -> _char_Vec
%LCLop [__, __, __] :int, int, int -> _senum1s_Struct_Tuple
%LCLop __ [__] :_char_Vec, int -> char
%LCLop __ [__] :__char_Obj_Arr, int -> _char_Obj
%LCLop __ [__] :__senum0s_Struct_Tuple_Vec, int -> _senum0s_Struct_Tuple
%LCLop __ [__] :__senum0s_Struct_Arr, int -> _senum0s_Struct
%LCLop __ [__] :__senum1s_Struct_Tuple_Vec, int -> _senum1s_Struct_Tuple
%LCLop __ [__] :__senum1s_Struct_Arr, int -> _senum1s_Struct
%LCLop __ -| __  :char, _char_Vec -> _char_Vec
%LCLop __ \leq __  :int, int -> bool
%LCLop __ \leq __  :double, double -> bool
%LCLop __ \geq __  :int, int -> bool
%LCLop __ \geq __  :double, double -> bool
%LCLop null : -> char
%LCLop hasta : -> _eenum2e_Enum
%LCLop pasta : -> _eenum2e_Enum
%LCLop yasta : -> _eenum2e_Enum
%LCLop __ \select a :_senum0s_Struct_Tuple -> int
%LCLop __ \select a :_senum0s_Struct -> _int_Obj
%LCLop __ \select a :_senum1s_Struct_Tuple -> int
%LCLop __ \select a :_senum1s_Struct -> _int_Obj
%LCLop __ \select b :_senum0s_Struct_Tuple -> int
%LCLop __ \select b :_senum0s_Struct -> _int_Obj
%LCLop __ \select b :_senum1s_Struct_Tuple -> int
%LCLop __ \select b :_senum1s_Struct -> _int_Obj
%LCLop __ \field_arrow a :__senum0s_Struct_Ptr -> _int_Obj
%LCLop __ \field_arrow a :__senum1s_Struct_Ptr -> _int_Obj
%LCLop __ \field_arrow b :__senum0s_Struct_Ptr -> _int_Obj
%LCLop __ \field_arrow b :__senum1s_Struct_Ptr -> _int_Obj
%LCLop __ \select c :_senum1s_Struct_Tuple -> int
%LCLop __ \select c :_senum1s_Struct -> _int_Obj
%LCLop __ \field_arrow c :__senum1s_Struct_Ptr -> _int_Obj
%LCLop NIL : -> __char_Obj_Ptr
%LCLop NIL : -> __senum0s_Struct_Ptr
%LCLop NIL : -> __senum1s_Struct_Ptr
%LCLop - __  :int -> int
%LCLop - __  :double -> double
%LCLop __ + __  :__char_Obj_Ptr, int -> __char_Obj_Ptr
%LCLop __ + __  :int, __char_Obj_Ptr -> __char_Obj_Ptr
%LCLop __ + __  :int, int -> int
%LCLop __ + __  :double, double -> double
%LCLop __ + __  :__senum0s_Struct_Ptr, int -> __senum0s_Struct_Ptr
%LCLop __ + __  :int, __senum0s_Struct_Ptr -> __senum0s_Struct_Ptr
%LCLop __ + __  :__senum1s_Struct_Ptr, int -> __senum1s_Struct_Ptr
%LCLop __ + __  :int, __senum1s_Struct_Ptr -> __senum1s_Struct_Ptr
%LCLop sizeof :bool -> int
%LCLop sizeof :int -> int
%LCLop sizeof :char -> int
%LCLop sizeof :void -> int
%LCLop sizeof :float -> int
%LCLop sizeof :double -> int
%LCLop sizeof :_eenum0e_Enum -> int
%LCLop sizeof :_eenum1e_Enum -> int
%LCLop sizeof :__ietag_Enum -> int
%LCLop sizeof :_eenum2e_Enum -> int
%LCLop __ - __  :__char_Obj_Ptr, int -> __char_Obj_Ptr
%LCLop __ - __  :__char_Obj_Ptr, __char_Obj_Ptr -> int
%LCLop __ - __  :int, int -> int
%LCLop __ - __  :double, double -> double
%LCLop __ - __  :__senum0s_Struct_Ptr, int -> __senum0s_Struct_Ptr
%LCLop __ - __  :__senum0s_Struct_Ptr, __senum0s_Struct_Ptr -> int
%LCLop __ - __  :__senum1s_Struct_Ptr, int -> __senum1s_Struct_Ptr
%LCLop __ - __  :__senum1s_Struct_Ptr, __senum1s_Struct_Ptr -> int
%LCLop isSub :_char_Vec, int -> bool
%LCLop isSub :__char_Obj_Arr, int -> bool
%LCLop isSub :__senum0s_Struct_Tuple_Vec, int -> bool
%LCLop isSub :__senum0s_Struct_Arr, int -> bool
%LCLop isSub :__senum1s_Struct_Tuple_Vec, int -> bool
%LCLop isSub :__senum1s_Struct_Arr, int -> bool
%LCLop succ :int -> int
%LCLop pred :int -> int
%LCLop abs :int -> int
%LCLop abs :double -> double
%LCLop div :int, int -> int
%LCLtype float float exposed
%LCLtype bool bool immutable
%LCLconst FALSE bool
%LCLconst TRUE bool
%LCLenumConst one _eenum0e_Enum
%LCLenumConst two _eenum0e_Enum
%LCLenumConst three _eenum0e_Enum
%LCLtype etype _etype exposed
%LCLenumConst cero _eenum1e_Enum
%LCLenumConst uno _eenum1e_Enum
%LCLenumConst dos _eenum1e_Enum
%LCLtype stype _stype exposed
%LCLenumConst siete __ietag_Enum
%LCLtype itype _itype exposed
%LCLtype st _st exposed
%LCLtype st2 _st2 exposed
%LCLenumConst hasta _eenum2e_Enum
%LCLenumConst pasta _eenum2e_Enum
%LCLenumConst yasta _eenum2e_Enum
%LCLSymbolTableEnd
