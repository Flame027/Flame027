"
 COPYRIGHT (c) 1997 by eXept Software AG
              All Rights Reserved

 This software is furnished under a license and may be used
 only in accordance with the terms of that license and with the
 inclusion of the above copyright notice.   This software may not
 be provided or otherwise made available to, or used by, any
 other person.  No title to or ownership of the software is
 hereby transferred.

 This is a demo example:

 THIS SOFTWARE IS PROVIDED BY THE CONTRIBUTOR ``AS IS'' AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 ARE DISCLAIMED.  IN NO EVENT SHALL THE CONTRIBUTOR BE LIABLE
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 SUCH DAMAGE.
"






"{ Package: 'stx:clients/Demos' }"

"{ NameSpace: CodingExamples_GUI }"

GUIDemoApplication subclass:#GUIDemoDataSetView
	instanceVariableNames:''
	classVariableNames:''
	poolDictionaries:''
	category:'examples-GUI'
!

Object subclass:#Row
	instanceVariableNames:'description id locked responsible state'
	classVariableNames:'Id'
	poolDictionaries:''
	privateIn:GUIDemoDataSetView
!

!GUIDemoDataSetView class methodsFor:'documentation'!

copyright
"
 COPYRIGHT (c) 1997 by eXept Software AG
              All Rights Reserved

 This software is furnished under a license and may be used
 only in accordance with the terms of that license and with the
 inclusion of the above copyright notice.   This software may not
 be provided or otherwise made available to, or used by, any
 other person.  No title to or ownership of the software is
 hereby transferred.

 This is a demo example:

 THIS SOFTWARE IS PROVIDED BY THE CONTRIBUTOR ``AS IS'' AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 ARE DISCLAIMED.  IN NO EVENT SHALL THE CONTRIBUTOR BE LIABLE
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 SUCH DAMAGE.
"





!

documentation
"
    Demonstrates a dataSet;
    notice, that the dummy-col in row 4 is not selectable.
"
! !

!GUIDemoDataSetView class methodsFor:'icons'!

iconID
    ^ Image fromFile:('bitmaps/b_alignR.xbm' ).


! !

!GUIDemoDataSetView class methodsFor:'interface specs'!

windowSpec
    "this window spec was automatically generated by the ST/X UIPainter"

    "do not manually edit this - the painter/builder may not be able to
     handle the specification if its corrupted."

    "
     UIPainter new openOnClass:CodingExamples_GUI::GUIDemoDataSetView andSelector:#windowSpec
     CodingExamples_GUI::GUIDemoDataSetView new openInterface:#windowSpec
    "
    "CodingExamples_GUI::GUIDemoDataSetView open"

    <resource: #canvas>

    ^
     
       #(#FullSpec
          #'window:' 
           #(#WindowSpec
              #'name:' 'DataSetView'
              #'layout:' #(#LayoutFrame 219 0 193 0 779 0 575 0)
              #'label:' 'DataSetView'
              #'min:' #(#Point 10 10)
              #'max:' #(#Point 1160 870)
              #'bounds:' #(#Rectangle 219 193 780 576)
              #'usePreferredExtent:' false
              #'forceRecursiveBackground:' true
          )
          #'component:' 
           #(#SpecCollection
              #'collection:' 
               #(
                 #(#DataSetSpec
                    #'name:' 'dataSet1'
                    #'layout:' #(#LayoutFrame 0 0.0 0 0.0 0 1.0 0 1.0)
                    #'hasHorizontalScrollBar:' true
                    #'hasVerticalScrollBar:' true
                    #'rowClassName:' 'CodingExamples_GUI::GUIDemoDataSetView::Row'
                    #'dataList:' #listHolder
                    #'has3Dsepartors:' true
                    #'multipleSelectOk:' true
                    #'columns:' 
                     #(
                       #(#DataSetColumnSpec
                          #'label:' 'iconID'
                          #'labelIsImage:' true
                          #'width:' 22
                          #'backgroundColor:' #(#Color 74.9996 74.9996 74.9996)
                          #'foregroundColor:' #(#Color 29.9992 29.9992 29.9992)
                          #'model:' #id
                          #'canSelect:' false
                          #'showColSeparator:' false
                      )
                       #(#DataSetColumnSpec
                          #'rendererType:' #rowSelector
                          #'backgroundColor:' #(#Color 74.9996 74.9996 74.9996)
                          #'foregroundColor:' #(#Color 29.9992 29.9992 29.9992)
                      )
                       #(#DataSetColumnSpec
                          #'label:' 'state'
                          #'labelBackgroundColor:' #(#Color 89.9992 89.9992 89.9992)
                          #'labelForegroundColor:' #(#Color 9.99924 0.0 100.0)
                          #'labelAlignment:' #left
                          #'labelActionSelector:' #statePressed
                          #'width:' 100
                          #'editorType:' #ComboList
                          #'rendererType:' #ComboList
                          #'foregroundColor:' #(#Color 100.0 0.0 0.0)
                          #'choices:' #stateChoices
                          #'model:' #state
                      )
                       #(#DataSetColumnSpec
                          #'label:' 'dummy'
                          #'model:' #dummy
                          #'selectSelector:' #dummyIsSelectable
                      )
                       #(#DataSetColumnSpec
                          #'label:' 'description'
                          #'minWidth:' 150
                          #'height:' 40
                          #'editorType:' #DigitalClockView
                          #'backgroundColor:' #(#Color 74.9996 74.9996 100.0)
                          #'foregroundColor:' #(#Color 100.0 0.0 0.0)
                          #'model:' #description
                      )
                       #(#DataSetColumnSpec
                          #'label:' 'responsible'
                          #'width:' 100
                          #'editorType:' #ComboBox
                          #'rendererType:' #ComboBox
                          #'foregroundColor:' #(#Color 0.0 0.0 100.0)
                          #'choices:' #responsibleChoices
                          #'model:' #responsible
                      )
                       #(#DataSetColumnSpec
                          #'label:' 'locked'
                          #'menu:' #lockedMenu
                          #'editorType:' #CheckToggle
                          #'rendererType:' #CheckToggle
                          #'model:' #locked
                      )
                    )
                )
              )
          )
      )
! !

!GUIDemoDataSetView methodsFor:'actions'!

statePressed
    Transcript showCR:'statePressed'.
! !

!GUIDemoDataSetView methodsFor:'aspects'!

listHolder
    "automatically generated by UIPainter ..."

    |holder|

    (holder := builder bindingAt:#listHolder) isNil ifTrue:[
        builder aspectAt:#listHolder put:(holder :=  List new).
        Row id:1.
        1000 timesRepeat:[
            holder add:Row new
        ].
    ].
    ^ holder
! !

!GUIDemoDataSetView::Row class methodsFor:'accessing'!

id
    |id|

    Id isNil ifTrue:[
        Id := 1
    ].
    id := Id.
    Id := id + 1.
  ^ id
!

id:aNumber
    Id := aNumber ? 0
! !

!GUIDemoDataSetView::Row class methodsFor:'instance creation'!

new
    ^ self basicNew initialize
! !

!GUIDemoDataSetView::Row class methodsFor:'menus'!

lockedMenu
    "this window spec was automatically generated by the ST/X MenuEditor"

    "do not manually edit this - the builder may not be able to
     handle the specification if its corrupted."

    "
     MenuEditor new openOnClass:CodingExamples_GUI::GUIDemoDataSetView::Row andSelector:#lockedMenu
     (Menu new fromLiteralArrayEncoding:(CodingExamples_GUI::GUIDemoDataSetView::Row lockedMenu)) startUp
    "

    <resource: #menu>

    ^
     
       #(#Menu
          
           #(
             #(#MenuItem
                #'label:' 'foo'
            )
             #(#MenuItem
                #'label:' 'bar'
            )
             #(#MenuItem
                #'label:' 'baz'
            )
          ) nil
          nil
      )
! !

!GUIDemoDataSetView::Row methodsFor:'accessing choices'!

responsibleChoices
    "automatically generated by DataSetBuilder ..."

    ^ #( 'person A' 'person B' 'person C' )

!

stateChoices
    "automatically generated by DataSetBuilder ..."

    ^ #( detected working done )
! !

!GUIDemoDataSetView::Row methodsFor:'accessing menus'!

lockedMenu
    "automatically generated by DataSetBuilder ..."

    "get middleButton menu for selected cell in column"

    ^ self class lockedMenu
! !

!GUIDemoDataSetView::Row methodsFor:'accessing readSelector'!

description
    "returns description"

    ^ self convertString:description
!

dummy
    "automatically generated by DataSetBuilder ..."

    "get value"

    ^ 'dummy'
!

id
    "returns id"

    ^ self convertString:(id printString)
!

locked
    "automatically generated by DataSetBuilder ..."

    ^ locked
!

responsible
    "returns responsible"

    ^ self convertString:responsible
!

state
    "returns state"

    ^ self convertString:state
! !

!GUIDemoDataSetView::Row methodsFor:'accessing selectSelector'!

dummyIsSelectable
    "can select cell in column"

    ^ id ~~ 4
! !

!GUIDemoDataSetView::Row methodsFor:'accessing writeSelector'!

description:aValue
    "automatically generated by DataSetBuilder ..."

    description := aValue
!

locked:aValue
    "automatically generated by DataSetBuilder ..."

    locked := aValue
!

responsible:aValue
    "automatically generated by DataSetBuilder ..."

    responsible := aValue.
!

state:aValue
    "automatically generated by DataSetBuilder ..."

    state := aValue
! !

!GUIDemoDataSetView::Row methodsFor:'initialization'!

initialize
    super initialize.

    state  := self stateChoices first.
    locked := false.
    responsible := '?'.
    description := 'any comment'.
    id := self class id.
! !

!GUIDemoDataSetView::Row methodsFor:'private'!

convertString:aString

    (aString size ~~ 0 and:[(id \\ 3) == 0]) ifFalse:[
        ^ aString
    ].
    (id \\ 2) == 0 ifTrue:[
        ^ Text string:aString string emphasis:#( bold italic )    
    ].
    ^ Text string:aString color:(Color pink)

! !

!GUIDemoDataSetView class methodsFor:'documentation'!

version
    ^ '$Header: /cvs/stx/stx/clients/Demos/GUIDemoDataSetView.st,v 1.4 2003-04-02 15:59:17 cg Exp $'
! !
