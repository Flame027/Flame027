# -------------------------------------------------------------------------------------------
# User settings
# -------------------------------------------------------------------------------------------
# ===================
# Stx bin directory =
# ===================
# Setting: stx_bin_dir - 
# Impact: defines the directory containing the executable
# Note: do not forget the last backslash ^(\^) and double quotes when changing to custom path
stx_bin_dir="%~dp0"

# ===================================
# Stx quick start and image details =
# ===================================
# Setting: __binary.stx_quick_start
# Impact: Uses flags --ignoreImage and --quick start to start StX as fast as possible
# TRUE - switches on the quick start
# FALSE - skips this option
__binary.stx_quick_start=FALSE

# Setting: image_path, image_name, image_suffix
# Impact: variables are self-explanatory
# Note: do not forget the last backslash ^(\^) and double quotes when changing to custom path
image_path="%~dp0"
# Setting: image_name - how should the default image be named
image_name="st"
image_suffix="img"

# Impact: Pair variables (affect each other):__binary.start_with_image and __binary.list_available_images
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# note: Before using image functionality check image path, name, and suffix

# Setting: __binary.start_with_image
# Impact: Stx starts (or not) with image.
# TRUE - image functionality will be used
# FALSE - image functionality ignored
__binary.start_with_image=FALSE

# Setting: __binary.list_available_images
# Impact: User menu is show when used; it shows all images within the directory (excluding subdirectories) and users selects one.
#         If switched off only default image (see image_path, image_name, image_suffix) is used.
# Note: IF start_with_image=FALSE and list_available_images=TRUE then a warning message is shown and append_to_log is set to FALSE automatically)
# TRUE - Switches on the user menu
# FALSE - no interaction from user required
__binary.list_available_images=FALSE
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# =================
# Stx logging     =
# =================
# Impact: Pair variables (affect each other): __binary.record_log_file and __binary.append_to_log
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Setting: __binary.record_log_file
# Impact: Both standard output and standard error are redirected to a log file
# Note: At least PowerShell 2.0 is required (WindowsXP and newer)
# TRUE - turns on the logging functionality
# FALSE - turns off the logging
__binary.record_log_file=TRUE

# Setting: __binary.append_to_log
# Impact: Appends the log file.  Uses a PowerShell when appending.
# Note: IF record_log_file=FALSE and append_to_log=TRUE then a warning message is shown and append_to_log is set to FALSE automatically)
# TRUE - if log file is found it will be appended.  If not a new one will be created 
# FALSE - the append functionality is turned off (the log file will be overwritten every time StX is executed)
__binary.append_to_log=TRUE
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Setting: log_directory, log_name, log_suffix
# Impact: Directory sets a log file directory (others are self-explanatory)
# If a change would be done, double quotes must be present: e.g. "C:\prg_sdk\Stx_stable\"
# Note: do not forget the last backslash ^(\^) and double quotes when changing to custom path
log_directory="%~dp0"
# Setting: log_name sets name for log file
log_name="smalltalk"
log_suffix=".log"

# Setting: __binary.log_add_datepart
# Impact: Adds a date part based on ISO 8601 to the log file; format YYYY-MM-DD ('-' as a separator)
# TRUE - Switch on this option
# FALSE - Skips this option
__binary.log_add_datepart=TRUE

# Setting: __binary.log_add_timepart
# Impact: Adds a time part to the log file; format hh;mm;ss (non-ISO ';' as a separator)
# Note: the ISO 8601 separator is not compatible with file-system)
# TRUE - Switch on this option
# FALSE - Skips this option
__binary.log_add_timepart=FALSE

# Setting: log_file_encoding
# Impact: Changes log file encoding
# Allowed values ASCII, UTF8 (default), UTF16 (in Microsoft world that is called Unicode), UTF32
# Note: only UTF16 is using Tee-Object which enables you to have all the features the developer envisioned for the logging process
#        you can simultaneously see the output in shell, view the log file while using StX and have the wished encoding
#        all other encodings carry some limitation due to the powershell tools limitation
log_file_encoding=UTF8

# =====================
# Log file line width =
# =====================
# Setting: log_file_encoding
# Impact: Sets log file line width when out-file is used (all except UTF16)
# Allowed values: only numeric
__numeric.log_file_width=150

# =================
# Stx shell       =
# =================
# Setting: __binary.close_shell
# Impact: When set to TRUE closes the shell upon StX exit
# TRUE - Switch on this option
# FALSE - Skips this option
__binary.close_shell=TRUE

# Setting: __binary.run_via_shell
# Impact: start with shell (.com) or just the GUI without shell (.exe)
# TRUE - uses stx.com executable
# FALSE - uses stx.exe executable
__binary.run_via_shell=TRUE


# -------------------------------------------------------------------------------------------
# Advanced user settings
# -------------------------------------------------------------------------------------------
# ====================
# Validate variables =
# ====================
# Setting: verify_variables_syntax
# Impact: Verifies the syntax of the batch file variables - e.g. batch file is very picky on spaces
# TRUE - active validation
# FALSE - inactive validation (NOT recommended)
verify_variables_syntax=TRUE

# Setting: verify_print_message
# Impact: shows message when the verification is complete
# TRUE - Switch on this option
# FALSE - message is not shown
verify_print_message=FALSE

# =======================
# Log file size warning =
# =======================
# Setting: __numeric.warning_logfile_size - Above what file size should a log file warning be shown?
# Impact: If the limit is reached a warning message is shown to the user
# Allowed values: only numeric
# Print user waring if the log file is getting too big - for 32MB in bytes
# the bigger log-file, the slower the logging process gets
__numeric.warning_logfile_size=33554432

# ====================
# Stdout redirection =
# ====================
# Setting: cmd_in_powershell
# Impact: The cmd.exe redirection is faster even when called from powershell
#         There could be unforeseen issues with it so there is a switch (no manual switches allowed!)
# TRUE - uses cmd.exe for redirecting output
# FALSE - uses powershell for redirection (default)
__binary.cmd_in_powershell=FALSE

# ====================
# Start timer =
# ====================
# Setting: use_timer
# Impact: Measures time between start of the script and correct ending. Measurement unit are seconds.
# TRUE - uses timer
# FALSE - switches off timer
__binary.use_timer=FALSE

# ==============
# Colored text =
# ==============
# Setting: colored_stdout
# Impact: Will adjust based on the color setting the stdout output from both batch and powershell
#        note: in powershell there are default colors used when setting is is turned off (FALSE.
# TRUE - uses colored output
# FALSE - uses default colors available
__binary.colored_stdout=TRUE

# ===================
# Stdout text color =
# ===================
# colors that can be used
# To find all the colors in powershell: `[enum]::GetValues([System.ConsoleColor]) | Foreach-Object {Write-Host $_ -ForegroundColor $_ }`
# Black, DarkBlue, DarkGreen, DarkCyan, DarkRedDarkMagenta, DarkYellow,
# Gray, DarkGray, Blue, Green, Cyan, Red, Magenta, Yellow, White

# verbose text (this is color used for normal usually [INFO] messages)
stdout_VerboseBackgroundColor=Black
stdout_VerboseForegroundColor=DarkGreen

# warning text
stdout_WarningBackgroundColor=Black
stdout_WarningForegroundColor=Yellow

# error
stdout_ErrorBackgroundColor=Black
stdout_ErrorForegroundColor=Red

# -------------------------------------------------------------------------------------------
# Do not touch, unless you know what you are doing settings
# -------------------------------------------------------------------------------------------
# Sets, in milliseconds, sleep periods in powershell  while using custom StX switches
# 50 milliseconds was found empirically 
#  - less than 50ms takes heavy toll on the CPU
#  - more than 50ms the stdout and stderror are refresh rate is quite slow
__numeric.start_sleep_in_debug=50