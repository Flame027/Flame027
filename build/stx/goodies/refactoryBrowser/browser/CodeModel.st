"{ Package: 'stx:goodies/refactoryBrowser/browser' }"

BrowserApplicationModel subclass:#CodeModel
	instanceVariableNames:'navigator tool lockPolicy state codeToolSelectionPolicyHolder
		labelHolder selectionPolicies'
	classVariableNames:''                    
	poolDictionaries:''
	category:'Refactory-Browser'
!

CodeModel comment:'CodeModel is the application that swaps the subcanvas (CodeTool) on the bottom of a browser. It is also responsible for updating the tool if it is not locked. The codeToolClass method is the method that returns the class of the code tool to create. You can change this method if you want to add your own code tool.

Instance Variables:
	navigator       <Navigator>     contains the navigator connected to the code tool
	tool    <CodeTool>      the current code tool that is being displayed in the subcanvas
	lockPolicy      <CodeModelLockPolicy>   the locking policy for updating the tool
	state   <NavigatorState>        the state returned by navigator that is used to update the navigator when this tool is unlocked '
!

CodeModel class instanceVariableNames:'defaultSelectionPolicies'!

!CodeModel class methodsFor:'instance creation'!

navigator: aNavigator 
	^(self new)
		navigator: aNavigator;
		yourself
! !

!CodeModel class methodsFor:'accessing'!

defaultSelectionPolicies
	^defaultSelectionPolicies isNil 
		ifTrue: 
			[defaultSelectionPolicies := Array 
						with: (SourceSelectionPolicy named: 'Source')]
		ifFalse: [defaultSelectionPolicies]
!

defaultSelectionPolicies: aCollection 
	defaultSelectionPolicies := aCollection
! !

!CodeModel class methodsFor:'interface specs'!

multiToolWindowSpec
	"UIPainter new openOnClass: self andSelector: #multiToolWindowSpec"

	<resource: #canvas>
	^#(#FullSpec 
		#window: 
		#(#WindowSpec 
			#label: 'Code Tool' 
			#bounds: #(#Rectangle 150 47 683 449 ) 
			#flags: 4 
			#menu: #menuBar ) 
		#component: 
		#(#SpecCollection 
			#collection: #(
				#(#SubCanvasSpec 
					#layout: #(#LayoutFrame 0 0 30 0 0 1 0 1 ) 
					#name: #subcanvas 
					#flags: 0 
					#majorKey: #Tool 
					#minorKey: #windowSpec 
					#clientKey: #tool ) 
				#(#MenuButtonSpec 
					#layout: #(#LayoutFrame 0 0.75 1 0 2 1 28 0 ) 
					#name: #codeToolSelectionPolicy 
					#model: #codeToolSelectionPolicyHolder 
					#callbacksSpec: 
					#(#UIEventCallbackSubSpec 
						#valueChangeSelector: #changedSelectionPolicy 
						#requestValueChangeSelector: #changeRequest ) 
					#menu: #codeToolSelectionPolicyMenu ) 
				#(#InputFieldSpec 
					#layout: #(#LayoutFrame 2 0 1 0 -2 0.75 28 0 ) 
					#name: #label 
					#model: #labelHolder 
					#tabable: false 
					#isReadOnly: true ) ) ) )
!

windowSpec
	"UIPainter new openOnClass: self andSelector: #windowSpec"

	<resource: #canvas>
	^#(#FullSpec
		#window:
		#(#WindowSpec
			#label: 'Code Tool'
			#bounds: #(#Rectangle 161 165 694 567 )
			#flags: 4
			#menu: #menuBar )
		#component:
		#(#SpecCollection
			#collection: #(
				#(#SubCanvasSpec
					#layout: #(#LayoutFrame 0 0 0 0 0 1 0 1 )
					#name: #subcanvas
					#flags: 0
					#majorKey: #Tool
					#minorKey: #windowSpec
					#clientKey: #tool ) ) ) )
! !

!CodeModel methodsFor:'accessing'!

codeToolClass
	| method |
	self protocol notNil
		ifTrue: [(self selectedClass isMeta and: [self selector notNil])
				ifTrue: 
					[method := self selectedClass compiledMethodAt: self selector.
					(#(#image #menu #canvas) includes: method resourceType)
						ifTrue: [^ResourceTool]
						ifFalse: [^BrowserCodeTool]]
				ifFalse: [^BrowserCodeTool]]
		ifFalse: [^ClassNavigatorTool]
!

lock
	self isLocked ifTrue: [^self].
	lockPolicy lock.
	self saveState
!

navigator
	^navigator
!

selectionPolicies
	^selectionPolicies isNil 
		ifTrue: 
			[selectionPolicies := self class defaultSelectionPolicies collect: 
							[:each | 
							(each copy)
								for: self;
								yourself]]
		ifFalse: [selectionPolicies]
!

selectionPolicy
	^self codeToolSelectionPolicyHolder value
!

state
	state isNil ifTrue: [state := navigator getState].
	^state
!

state: anObject
	^state := anObject
!

tool
	^tool
!

unlock
	self isLocked ifFalse: [^self].
	navigator setState: self state.
	lockPolicy unlock
! !

!CodeModel methodsFor:'actions'!

navigate
	navigator setState: self state
! !

!CodeModel methodsFor:'aspects'!

codeToolSelectionPolicyHolder
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."

	^codeToolSelectionPolicyHolder isNil
		ifTrue:
			[codeToolSelectionPolicyHolder := nil asValue]
		ifFalse:
			[codeToolSelectionPolicyHolder]
!

codeToolSelectionPolicyMenu
	| mb |
	mb := MenuBuilder new.
	self selectionPolicies do: [:each | mb add: each name -> each].
	^mb menu
!

labelHolder
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."

	^labelHolder isNil
		ifTrue:
			[labelHolder := String new asValue]
		ifFalse:
			[labelHolder]
! !

!CodeModel methodsFor:'events'!

noticeOfWindowClose: aWindow
	navigator removeDependent: self.
	self release.
	^super noticeOfWindowClose: aWindow
! !

!CodeModel methodsFor:'initialize-release'!

initialize
	super initialize.
	self codeToolSelectionPolicyHolder value: self selectionPolicies first
!

lockPolicyClass: aClass
	lockPolicy := aClass on: self
!

navigator: aNavigator 
	navigator notNil ifTrue: [navigator removeDependent: self].
	navigator := aNavigator.
	navigator addDependent: self.
	lockPolicy := StateLockPolicy on: self.
	tool := self codeToolClass on: self.
	self state: navigator getState
!

release
	navigator removeDependent: self.
	tool release.
	super release
!

selectionPolicy: aCodeModelSelectionPolicy 
	self codeToolSelectionPolicyHolder value: aCodeModelSelectionPolicy
! !

!CodeModel methodsFor:'interface opening'!

preBuildWith: aBuilder 
	aBuilder 
		subCanvasAt: #Tool
		at: #windowSpec
		put: (tool class perform: tool windowSpecMethod).
	^super preBuildWith: aBuilder
!

windowSpecMethod
	^self selectionPolicies size > 1 
		ifTrue: [#multiToolWindowSpec]
		ifFalse: [#windowSpec]
! !

!CodeModel methodsFor:'menu'!

menu
	^tool menu
!

menuBar
	| menu |
	menu := Menu new.
	menu
		addItem: ((MenuItem labeled: '&Window') submenu: [self windowMenu]);
		addItem: ((MenuItem labeled: 'Too&l') submenu: [self menu value]).
	^menu
!

windowMenu
	| menu navigateItem |
	menu := Menu new.
	navigateItem := MenuItem labeled: '&Navigate to'.
	menu addItem: navigateItem value: #navigate.
	^menu
! !

!CodeModel methodsFor:'navigator accessing'!

categories
	^self state categories
!

category
	^self state category
!

className
	^self state className
!

classNames
	^self state classNames
!

methods
	^state methods
!

nonMetaClass
	^self state nonMetaClass
!

nonMetaClasses
	^self state nonMetaClasses
!

protocol
	^self state protocol
!

protocols
	^self state protocols
!

selectedClass
	^self state selectedClass
!

selectedClasses
	^self state selectedClasses
!

selector
	^self state selector
!

selectors
	^self state selectors
!

setClass: aClass 
	self state selectedClass: aClass.
	self updateNavigator
!

setSelector: aSelector 
	self state selector: aSelector.
	self updateNavigator
!

updateNavigator
	CodeModelLockPolicy flushCache.
	self isLocked ifFalse: [navigator setState: self state].
	tool notNil ifTrue: [tool updateContents]
! !

!CodeModel methodsFor:'navigator testing'!

isMeta
	^self state isMeta
! !

!CodeModel methodsFor:'printing'!

printOn: aStream 
	self state printOn: aStream.
	(tool notNil and: [tool isEditing])
		ifTrue: [aStream nextPut: $*]
! !

!CodeModel methodsFor:'private'!

saveState
	tool notNil ifTrue: [tool saveState]
!

subcanvases
	| superSubcanvases |
	superSubcanvases := super subcanvases.
	self tool isNil
		ifTrue: [^ superSubcanvases]
		ifFalse: 
			[^ (superSubcanvases asOrderedCollection) add: self tool; yourself]
! !

!CodeModel methodsFor:'testing'!

isEditing
	^tool notNil and: [tool isEditing]
!

isLocked
	^lockPolicy isLocked
! !

!CodeModel methodsFor:'updating'!

changeRequest
	^self updateRequest
!

changedSelectionPolicy
	self updateCodeTool
!

update: anAspectSymbol with: aParameter from: aSender 
	anAspectSymbol = #closed ifTrue: [^self closeRequest].
	self updateCodeTool
!

updateCodeTool
	| oldTool codeToolClass |
	lockPolicy isLocked ifTrue: [^self].
	self state: navigator getState.
	oldTool := tool.
	codeToolClass := self codeToolClass.
	tool class == codeToolClass ifFalse: [tool := codeToolClass on: self].
	tool == oldTool 
		ifFalse: 
			[self installSubcanvasIn: #subcanvas using: tool.
			oldTool release].
	tool notNil ifTrue: [tool updateContents]
!

updateRequest
	^lockPolicy isLocked or: [super updateRequest]
! !

!CodeModel class methodsFor:'documentation'!

version
    ^ '$Header: /cvs/stx/stx/goodies/refactoryBrowser/browser/CodeModel.st,v 1.8 2003-09-23 11:20:19 cg Exp $'
! !
