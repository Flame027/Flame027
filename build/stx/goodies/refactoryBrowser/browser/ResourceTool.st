"{ Package: 'stx:goodies/refactoryBrowser/browser' }"

CodeTool subclass:#ResourceTool
	instanceVariableNames:'subcanvas visual'
	classVariableNames:'OpenTypes ResourceEditors ResourceViewers'
	poolDictionaries:''
	category:'Refactory-Code Tools'
!

ResourceTool comment:'ResourceTool is the CodeTool that is used to edit resouce methods (e.g., menu methods). From the ResourceTool you can launch the specific editor for the resource or view the method either graphically or textually.

Instance Variables:
	subcanvas       <CodeTool> contains the specific viewer for the method or a BrowserCodeTool
	visual  <ValueHolder on: Boolean> should the method be displayed textually or visually

Class Variables:
	OpenTypes       <Collection of: Symbol> the resource types are openable
	ResourceEditors <Dictionary key: Symbol value: Symbol> maps the method resource type to the VW editor''s class name for that resource type
	ResourceViewers <Dictionary key: Symbol value: CodeTool class> maps the method resource type to a specific CodeTool for that resource type'
!


!ResourceTool class methodsFor:'class initialization'!

initialize
        "self initialize"

        ResourceViewers := Dictionary new.
        ResourceViewers at: #image put: IconViewer; at: #menu put: MenuViewer; at: #canvas put: CanvasViewer.
        ResourceEditors := Dictionary new.
        RBParser isSmalltalkX ifTrue:[
            ResourceEditors at: #image put: ImageEditor; at: #menu put: MenuEditor; at: #canvas put: UIPainter.
        ] ifFalse:[
            ResourceEditors at: #image put: UIMaskEditor; at: #menu put: UIMenuEditor; at: #canvas put: UIPainter
        ].
        OpenTypes := #(#canvas)
! !

!ResourceTool class methodsFor:'interface specs'!

windowSpec
	"UIPainter new openOnClass: self andSelector: #windowSpec"

	<resource: #canvas>
	^#(#FullSpec 
		#window: 
		#(#WindowSpec 
			#label: 'Unlabeled Canvas' 
			#bounds: #(#Rectangle 286 195 794 645 ) ) 
		#component: 
		#(#SpecCollection 
			#collection: #(
				#(#ActionButtonSpec 
					#layout: #(#Point 50 0 ) 
					#model: #editSpec 
					#label: 'Edit' 
					#defaultable: true ) 
				#(#ActionButtonSpec 
					#layout: #(#Point 125 0 ) 
					#name: #open 
					#flags: 56 
					#model: #openApplication 
					#label: 'Open' 
					#defaultable: true ) 
				#(#RadioButtonSpec 
					#layout: #(#AlignmentOrigin -10 0.666666 0 0 1 0 ) 
					#model: #visual 
					#callbacksSpec: 
					#(#UIEventCallbackSubSpec 
						#requestValueChangeSelector: #updateRequest ) 
					#label: 'visual' 
					#select: true ) 
				#(#RadioButtonSpec 
					#layout: #(#LayoutOrigin 10 0.666666 0 0 ) 
					#model: #visual 
					#callbacksSpec: 
					#(#UIEventCallbackSubSpec 
						#requestValueChangeSelector: #updateRequest ) 
					#label: 'text' 
					#select: false ) 
				#(#SubCanvasSpec 
					#layout: #(#LayoutFrame 0 0 30 0 0 1 0 1 ) 
					#name: #subcanvas 
					#flags: 0 
					#majorKey: #subcanvas 
					#minorKey: #windowSpec 
					#clientKey: #subcanvas ) ) ) )
! !

!ResourceTool methodsFor:'accessing'!

menu
	| menu visualItem textItem |
	menu := Menu new.
	visualItem := MenuItem labeled: '&visual'.
	textItem := MenuItem labeled: '&text'.
	visual value
		ifTrue: 
			[visualItem beOn.
			textItem beOff]
		ifFalse: 
			[visualItem beOff.
			textItem beOn].
	menu addItem: visualItem value: [self updateRequest ifTrue: [self visual value: true]].
	menu addItem: textItem value: [self updateRequest ifTrue: [self visual value: false]].
	menu addItemGroup: (Array with: ((MenuItem labeled: 'too&l')
				submenu: subcanvas menu)).
	^menu
!

method
	| selector class |
	selector := self selector.
	class := self selectedClass.
	^selector notNil
		ifTrue: [class compiledMethodAt: selector ifAbsent: [nil]]
		ifFalse: [nil]
! !

!ResourceTool methodsFor:'actions'!

editSpec
	| editorClass method editorClassName |
	method := self method.
	method isNil ifTrue: [^self].
	editorClassName := ResourceEditors at: method resourceType ifAbsent: [nil].
	editorClassName isNil ifTrue: [^self].
	editorClass := Smalltalk at: editorClassName ifAbsent: [nil].
	editorClass isNil ifTrue: [^self].
	editorClass new openOnClass: self nonMetaClass andSelector: self selector
!

openApplication
	self nonMetaClass openWithSpec: self selector
! !

!ResourceTool methodsFor:'aspects'!

subcanvas
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."

	^subcanvas isNil
		ifTrue:
			[subcanvas := IconViewer new]
		ifFalse:
			[subcanvas]
!

visual
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."

	^visual isNil
		ifTrue:
			[visual := nil asValue]
		ifFalse:
			[visual]
! !

!ResourceTool methodsFor:'initialize-release'!

codeModel: aCodeModel 
	super codeModel: aCodeModel.
	self createSubcanvas
!

initialize
	super initialize.
	self visual value: true.
	self visual onChangeSend: #changedVisual to: self
!

release
	self visual retractInterestsFor: self.
	subcanvas release.
	super release
! !

!ResourceTool methodsFor:'interface opening'!

postBuildWith: aBuilder 
	| method |
	method := self method.
	method notNil ifTrue: [(OpenTypes includes: method resourceType)
			ifTrue: [self show: #open; enable: #open]].
	^super postBuildWith: aBuilder
!

preBuildWith: aBuilder
	aBuilder
		subCanvasAt: #subcanvas
		at: #windowSpec
		put: subcanvas class windowSpec.
	^super preBuildWith: aBuilder
! !

!ResourceTool methodsFor:'private'!

createSubcanvas
	| method viewClass |
	method := self method.
	viewClass := method notNil & visual value
				ifTrue: [ResourceViewers at: method resourceType ifAbsent: [BrowserCodeTool]]
				ifFalse: [BrowserCodeTool].
	subcanvas notNil ifTrue: [subcanvas release].
	subcanvas := viewClass on: codeModel
!

subcanvases
	^(OrderedCollection withAll: super subcanvases)
		add: self subcanvas; yourself
! !

!ResourceTool methodsFor:'updating'!

changedVisual
	self updateSubcanvas
!

updateContents
	self updateSubcanvas
!

updateSubcanvas
	self createSubcanvas.
	self installSubcanvasIn: #subcanvas using: subcanvas.
	subcanvas updateContents
! !

!ResourceTool class methodsFor:'documentation'!

version
    ^ '$Header: /cvs/stx/stx/goodies/refactoryBrowser/browser/ResourceTool.st,v 1.7 2003-09-23 10:43:27 cg Exp $'
! !

ResourceTool initialize!
