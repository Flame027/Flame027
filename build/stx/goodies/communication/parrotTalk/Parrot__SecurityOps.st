"{ Package: 'stx:goodies/communication/parrotTalk' }"

"{ NameSpace: Parrot }"

Object subclass:#SecurityOps
	instanceVariableNames:'portalMap localMessagesToSign remoteMessagesToSign diffieHellman'
	classVariableNames:''
	poolDictionaries:''
	category:'ParrotTalk'
!

SecurityOps comment:'DiffieHellman bits: 2048DiffieHellman	prime: 16rFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199FFFFFFFFFFFFFFFF	generator: 2	16rC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199(2 raisedTo: 4096) - (2 raisedTo: 4032) - 1 + (2 raisedTo: 64) * ( ( (2 raisedTo: 3966) * Float pi) + 240904 )'
!


!SecurityOps class methodsFor:'instance creation'!

new
    "return an initialized instance"

    ^ self basicNew initialize.
!

newOnMap: map

	^ self new initializeOnMap: map; yourself.
! !

!SecurityOps class methodsFor:'compiling'!

base64EncodedCryptoHash: object

	| encoded hash bytes |
	bytes := object asAsn1DerBytes.
	((bytes first bitAnd: 16r80) > 0)
		ifTrue: [encoded := #(0) asByteArray, bytes]
		ifFalse: [encoded := bytes].
	hash := (SHA1 hashMessage: encoded) asByteArray.
	((hash first bitAnd: 16r80) > 0)
		ifTrue: [hash := #(0) asByteArray, hash].
	^ hash base64Encoded
!

hash: byteArray pad: padByte

	| paddedStream |
	paddedStream := (ReadWriteStream on: (ByteArray new: 64))
		nextPutAll: (ByteArray new: 16 withAll: padByte);
		nextPutAll: byteArray; reset.
	^ MD5 hashStream: paddedStream.
! !

!SecurityOps methodsFor:'accessing'!

portalMap

	^ portalMap
! !

!SecurityOps methodsFor:'action'!

addLocalFrame: frame

	localMessagesToSign addLast: frame header asSignableBytes.

!

addRemoteFrame: frame

	remoteMessagesToSign addLast: frame header asSignableBytes.

!

authenticateSignature: signature withKey: key
		
	| byteArray |
	byteArray := (remoteMessagesToSign
		inject: (WriteStream on: ByteArray new)
		into: [:stream :msg | stream nextPutAll: msg. stream]) contents.
	^ key verify: signature isSignatureOf: byteArray
!

clearSensitiveInfo

	self initialize.
!

dhParm

	^ diffieHellman sendMessage asPadPositiveByteArray.
!

generateSignatureWithKey: key

	| byteArray |
	byteArray := (localMessagesToSign
		inject: (WriteStream on: ByteArray new)
		into: [:stream :msg | stream nextPutAll: msg. stream]) contents.
	^ key signMessage: byteArray.
!

installOnSession: session stack: stack incoming: incoming

	stack pop. "session"
	stack push: (self makeImmigrationThunk: stack).
	stack push: (self makeCipherThunk: stack incoming: incoming).
	"stack push: (self makeGzipThunk: stack)."
	stack push: (self makeCustomsThunk: stack).
	stack push: (self makeEncoderThunk: stack key: session farKey).
	stack push: session.
!

matchBestEncoder: otherEncoders

	^ portalMap dataEncoderNames
		detect: [:each | otherEncoders includes: each]
		ifNone: [''].
!

matchBestProtocol: otherProtocols

	^ portalMap cryptoProtocolNames
		detect: [:each | otherProtocols includes: each]
		ifNone: [''].
!

processDhParm: dhParm

	diffieHellman receiveMessage: dhParm asInteger.
! !

!SecurityOps methodsFor:'initialize-release'!

dhGenerator

    ^ 2
!

dhPrime0
	"prime from DH used in VatTP (http://www.erights.org/elib/distrib/vattp/index.html)"

    ^ 119737914775462509838170437650443916377511571523280127227899447719294084320704253537978070284126826302859486033998465467188646855777933154987304015680716743916472238051242730320539605643481248526686248310127334173449056014874439925491652836615915938029029782321539388697349613396698017627677439533107752978203.
!

dhPrime1
	"prime from rfc3526: 2048-bit MODP Group (https://tools.ietf.org/html/rfc3526#section-3)"

    ^ 74590163000744215664571428206261183464882552592869067139382222056552715349763159120841569799756029042920968184704590129494078052978962320087944021101746026347535981717869532122259590055984951049094749636380324830154777203301864744802934173941573749720376124683717094961945258961821638084501989870923589746845121992752663157772293235786930128078740743810989039879507242078364008020576647135087519356182872146031915081433053440716531771499444683048837650335204793844725968402892045220358076481772902929784589843471786500160230209071224266538164123696273477863853813807997663357544.
!

dhPrime2
	"prime from rfc3526: 4096-bit MODP Group (https://tools.ietf.org/html/rfc3526#section-5)"

    ^ 2410530750555128480404832270192663364151467702011751933879637605973789221782066733764999203363704129606725825795791908836919026891008572279149390055807162392250256330675646684985020816653564088393601255551053956979369176574871401825356351905954754425579325059159357541447202402629492024053083609371857904381957718450531530194409655939454417512083190490446411290435095691232982270560658265752336515612669847419162670442726881468759765503413484384231928086567304548873152895471777542041331295452193483437093324721671982381137170877019378736328504429441519086875250180566973371024565100152106601473353543146065929084184839443761934499580540630736001826186860691671091333220442039311122340290032875870162931668119405505272589120967176899988786150725828794681324808761141306035208420342336072781476969098514933550590456108099575280542728823110230945755469657354015996525833497997573904682502893607752601875297516311328768544282391694848545450743456903980185911755737042017862759007701330934172588858437483776006730068785982983620955908093886797832246742091664598696551951967066481707777158422082406362755912735174532008626510101397855286235671736608924747321206806912532048112345468826525444472189337
!

dhPrime3
	"prime from rfc3526: 8192-bit MODP Group (https://tools.ietf.org/html/rfc3526#section-7)"

    ^ 157345719636517349031914787840795183360026638767408444836160735920235148210917033726211387815887627827705734478020107642484343733685369792573630192119966233087501146306930192820578663751275085202735029134165233218735059418478263170152232765849235201818446432337502994935362330762391445622782282188808233481719023314748556540681827122218778443314892898551082111595698662881265243307974381452437785960951265552628296213129452403360830101604097505199781740705432307451931457195515027658141042456770415780753101532761657119773405176782670636159990431046242110269066806953715234509083875822849625443024079782363091299048451894882362926894317144737410441282087015843857000323316529386611928572701191441099308948602118065674778841862859683457510063143565907481167509717395597898116435324594276176450779411007127466632428417211269480952237874103122136155826626065010086324942710578577698756941657706539469172619292724072004893516757846758090804657246366180386616459317441951832470872576691770115451638307909708668436724514737933320911326826644540953907826289361849877948125063114150589391579931187188851025644304200939936966196760357263524952500417867413141502405131682823550195127973649215264576601045541858739802789780576190389687084407336199273626637337897866950261751527618108216040013950635532772881143953429804822509567797838385664767718962777045415062342385185628719101066987179909424268092120496765061015186242220983990959431090680746894303414296373784929929443770350460705235621203392466023610748001779512640457254861862333157206461054655045985638091862666606013674303417122905527926904945274700164246322093583086571900533109509237806760403355758639381362642761236780619035409546864544868783095653083791384327759422256212215723962991728050315089455731844931367915171198000548887703952528172163487350474060019721873857045676627442003382580297401807897989107302369485636815896878674238640030968799093866942336235433036076009161462178114582790758093925108736208927143675696169726584203712093788265443871304067776293587154571463972347302063664207674860814606738004602569743737581476611086029049869127077792650341036396782694638987190703978348703287357298833724438732703598208493492250165432064839743039267287867287073547594633485969051722112239341521098363273151184311767085196493760798520531852225451308154729810823518440374738712737752847138751498891562298998178475412106463438210374879164364055131294017333374624947797050187069
!

initialize

	localMessagesToSign := OrderedCollection new.
	remoteMessagesToSign := OrderedCollection new.
	diffieHellman := nil.
!

initializeOnMap: aPortalMap

	portalMap := aPortalMap.
	self initialize.
	diffieHellman := DiffieHellman prime: self dhPrime1 generator: self dhGenerator.
	"diffieHellman := DiffieHellman prime: self dhPrime2 generator: self dhGenerator."
	"diffieHellman := DiffieHellman prime: self dhPrime3 generator: self dhGenerator."
! !

!SecurityOps methodsFor:'private - making'!

makeCipherThunk: stack incoming: incoming

	^ portalMap buildProtocol
		makeThunkOn: { diffieHellman sharedKeyPadPositiveByteArray }
		incoming: incoming.
!

makeCustomsThunk: stack

	| hmac |
	hmac := self makeHMAC.
	^ (Thunk new) doesPop: false; doesPush: false;
		upThunk: [:frame |
			((hmac digestMessage: frame payload) = (stack propertyAt: #ReadMAC))
				ifFalse: [ CryptographyError signal: 'customs failed MAC verification' ] ];
		downThunk: [:frame | stack propertyAt: #WriteMAC put: (hmac digestMessage: frame payload) ];
		yourself.
!

makeEncoderThunk: stack key: farKey

	^ portalMap buildEncoder makeThunkOnFarKey: farKey.
!

makeHMAC

	| sharedKey hashPadder macKey |
	sharedKey := diffieHellman sharedKeyPadPositiveByteArray.
	hashPadder := self class.
	macKey := MD5 hashMessage: (
		(hashPadder hash: sharedKey pad: 16rCC), 
		(hashPadder hash: sharedKey pad: 16rBB), 
		(hashPadder hash: sharedKey pad: 16rAA), 
		(hashPadder hash: sharedKey pad: 16r99)).
	macKey := macKey, (MD5 hashMessage: (
		(hashPadder hash: sharedKey pad: 16r88), 
		(hashPadder hash: sharedKey pad: 16r77), 
		(hashPadder hash: sharedKey pad: 16r66), 
		(hashPadder hash: sharedKey pad: 16r55))).
	macKey := macKey, (MD5 hashMessage: (
		(hashPadder hash: sharedKey pad: 16r44), 
		(hashPadder hash: sharedKey pad: 16r33), 
		(hashPadder hash: sharedKey pad: 16r22), 
		(hashPadder hash: sharedKey pad: 16r11))).
	^  SHA1 new hmac key: macKey.
!

makeImmigrationThunk: stack

	^ (Thunk new)
		upThunk: [:frame |
			stack propertyAt: #ReadMAC put: frame hdr mac.
			frame payload ];
		headerMakerThunk: [:frame | MAC new mac: (stack propertyAt: #WriteMAC) ];
		downThunk: [:frame | frame asByteArray ];
		yourself
! !

!SecurityOps class methodsFor:'documentation'!

version
    ^ '$Header: /cvs/stx/stx/goodies/communication/parrotTalk/Parrot__SecurityOps.st,v 1.2 2018-05-14 00:38:43 cg Exp $'
!

version_CVS
    ^ '$Header: /cvs/stx/stx/goodies/communication/parrotTalk/Parrot__SecurityOps.st,v 1.2 2018-05-14 00:38:43 cg Exp $'
! !

