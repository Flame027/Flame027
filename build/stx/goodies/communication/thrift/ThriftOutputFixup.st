"{ Package: 'stx:goodies/communication/thrift' }"

Object subclass:#ThriftOutputFixup
	instanceVariableNames:'classToFix'
	classVariableNames:''
	poolDictionaries:''
	category:'Net-Communication-Thrift-Fixup'
!

!ThriftOutputFixup class methodsFor:'documentation'!

documentation
"
    postprocessor to fixup thrift-generated st classes.
    Apply this to st-files (in gen-st) as generated by thrift.exe.
    Performs the following actions (code rewrites):
        convert from                    to:

                                        put all sendXXX methods into category 'private-send'
                                        put all recvXXX methods into category 'private-receive'
                                        put remaining methods into category 'API'           

        res exception signal            res exception raiseSignal           

        oprot readMessageBegin          iprot readMessageBegin           
        oprot readMessageEnd            iprot readMessageEnd           
        oprot readStructEnd             iprot readStructEnd           

    [usage:]
        assumng that cassandra.thrift has already been processed (to gen-st/cassandra.st)
        and loaded into the Cassandra namespace, execute:

            ThriftOutputFixup fixupClass:Cassandra::CassandraClient

    [caveat:]
        quick and dirty hack; very inefficient (recompiles methods over and over).
        not worth tuning, as this is executed only once after thrift-generation.

    [author:]
        cg

    [instance variables:]

    [class variables:]

    [see also:]

"
! !

!ThriftOutputFixup class methodsFor:'fixup'!

fixupClass:aClass
    "fixup the class as generated by thrift and just loaded from gen-st"

    (self new classToFix:aClass) performFixup

    "
     self fixupClass:Cassandra::CassandraClient
    "
! !

!ThriftOutputFixup methodsFor:'accessing'!

classToFix:something
    classToFix := something.
! !

!ThriftOutputFixup methodsFor:'fixup'!

performFixup
    self addTConstantsPool.
    self rewritePoolConstantAccesses.
    self changeMethodCategories.
    self rewriteExceptionRaises.
    self rewriteWrongCode.
    self removeUselessFlushes.

    "
     self fixupClass:Cassandra::CassandraClient
    "
! !

!ThriftOutputFixup methodsFor:'fixup helpers'!

addTConstantsPool
    (classToFix sharedPools includes:TConstants) ifFalse:[
        classToFix sharedPoolNames:(classToFix sharedPoolNames copyWith: 'TConstants').
    ]

    "
     self fixupClass:Cassandra::CassandraClient
    "
!

changeMethodCategories
    classToFix selectorsAndMethodsDo:[:sel :mthd |
        |cat|

        cat := 'API'.
        (sel startsWith:'send') ifTrue:[
            cat := 'private-send'
        ] ifFalse:[
            (sel startsWith:'recv') ifTrue:[
                cat  := 'private-receive'
            ]
        ].
        mthd category:cat
    ].

    "
     self fixupClass:Cassandra::CassandraClient
    "
!

recompile:mthd as:source
    mthd mclass 
        compile:source 
        classified:(mthd category).

    "
     self fixupClass:Cassandra::CassandraClient
    "
!

removeUselessFlushIn:mthd
    |rewriter newSource|

    rewriter := "ParseTreeSourceRewriter "ParseTreeRewriter new.
    rewriter
        replace: 'oprot transport flush'
        with:'nil "oprot transport flush - flush not needed here"'.

    rewriter executeTree: mthd parseTree.
    newSource := rewriter tree formattedCode.

    self recompile:mthd as:newSource.

    "
     self fixupClass:Cassandra::CassandraClient
    "
!

removeUselessFlushes
    classToFix selectorsAndMethodsDo:[:sel :mthd |
        (sel startsWith:'recv') ifTrue:[
            self removeUselessFlushIn:mthd
        ]
    ]
!

rewriteExceptionRaiseIn:mthd
    |rewriter newSource|

    rewriter := "ParseTreeSourceRewriter "ParseTreeRewriter new
                    replace: 'res exception signal'
                    with:'res exception raiseSignal'.

    rewriter executeTree: mthd parseTree.
    newSource := rewriter tree formattedCode.

    self recompile:mthd as:newSource.

    "
     self fixupClass:Cassandra::CassandraClient
    "
!

rewriteExceptionRaises
    classToFix selectorsAndMethodsDo:[:sel :mthd |
        (mthd sends:#signal) ifTrue:[
            self rewriteExceptionRaiseIn:mthd
        ]
    ]
!

rewritePoolConstantAccesses
    classToFix selectorsAndMethodsDo:[:sel :mthd |
        (mthd usedGlobals includes:#TType) ifTrue:[
            self rewritePoolConstantAccessesIn:mthd
        ]
    ]
!

rewritePoolConstantAccessesIn:mthd
    |rewriter newSource|

    rewriter := "ParseTreeSourceRewriter "ParseTreeRewriter new.
    rewriter
        replace: 'TType stop' with:'TTypeStop'.

    rewriter
        replace: 'TType string' with:'TTypeString'.

    rewriter
        replace: 'TType struct' with:'TTypeStruct'.

    rewriter
        replace: 'TType i16' with:'TTypeI16'.

    rewriter
        replace: 'TType i32' with:'TTypeI32'.

    rewriter
        replace: 'TType i64' with:'TTypeI64'.

    rewriter
        replace: 'TType bool' with:'TTypeBool'.

    rewriter
        replace: 'TType byte' with:'TTypeByte'.

    rewriter
        replace: 'TType double' with:'TTypeDouble'.

    rewriter
        replace: 'TType map' with:'TTypeMap'.  

    rewriter
        replace: 'TType list' with:'TTypeList'.  

    rewriter executeTree: mthd parseTree.
    newSource := rewriter tree formattedCode.

    self recompile:mthd as:newSource.

    "
     self fixupClass:Cassandra::CassandraClient
    "
!

rewriteWrongCode
    classToFix selectorsAndMethodsDo:[:sel :mthd |
        ((mthd sends:#readMessageBegin) 
            or:[ (mthd sends:#readMessagtEnd)
            or:[ (mthd sends:#readStructEnd) ]]
        ) ifTrue:[
            self rewriteWrongCodeIn:mthd
        ]
    ]
!

rewriteWrongCodeIn:mthd
    |rewriter newSource|

    rewriter := "ParseTreeSourceRewriter "ParseTreeRewriter new.
    rewriter
        replace: 'oprot readMessageBegin'
        with:'iprot readMessageBegin'.

    rewriter 
        replace: 'oprot readMessageEnd'
        with:'iprot readMessageEnd'.

    rewriter 
        replace: 'oprot readStructEnd'
        with:'iprot readStructEnd'.

    rewriter executeTree: mthd parseTree.
    newSource := rewriter tree formattedCode.

    self recompile:mthd as:newSource.

    "
     self fixupClass:Cassandra::CassandraClient
    "
! !

!ThriftOutputFixup class methodsFor:'documentation'!

version
    ^ '$Header: /cvs/stx/stx/goodies/communication/thrift/ThriftOutputFixup.st,v 1.2 2013-03-21 10:43:19 cg Exp $'
!

version_CVS
    ^ '$Header: /cvs/stx/stx/goodies/communication/thrift/ThriftOutputFixup.st,v 1.2 2013-03-21 10:43:19 cg Exp $'
! !

