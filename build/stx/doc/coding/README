This directory contains examples of how to use some of the more non-obvious
mechanisms of Smalltalk (and/or Smalltalk/X), and some view class examples.

Some files contain full classes or methods, others contain just code fragments
to be evaluated by doIt. Look at the files (using the FileBrowser) before you
start filing them in.

The examples will be split into two directories (one for mechanisms,
another for view tutorials) soon.


	Array-literalStore      storing into array literals is BAD BAD BAD
				(notice: this is outdated - now literals are immutable in ST/X)

	BOSS-examples           some code fragments to demonstrate binary store
				and load of objects (code fragments)

	BOSS-errors             some code fragments to demonstrate possible errors
				when using binary store (i.e. loading obsolete instances)

	Block-examples          demonstrates, that blocks have true local state
				(i.e. are closures, and can be recursive)

	Block-unwind            shows how valueOnUnwind: and valueNowOrOnUnwind:
				are used

	Class-anonymous         demonstrates how classes (a Behavior or light weight class)
				can be created on-the-fly. Even have instances which
				understand messages.

	Class-dynamic           simple demonstration of dynamically changing the
				class of an object.

	Class-multipleInheritance
				a very simple implementation of multiple inheritance

	Class-subclassing       each possibility to define a subclass

	Context-advanced        some special tricks possible with contexts
				(some of these tricks already found their way into
				 the standard classes; see Blocks whileXX implementation)
				Also includes demonstrations of unwinding and unwind-
				protect-actions (valueOnUnwindDo)

	File-IO.st              code fragments to show simple I/O with text & binary files

	FileIn-errors           demonstrates how errors during fileIn are handled
				(i.e. use of abort, debug & continue)

	Model-Simple1           shows how models can be used (i.e. kind of
				MVC; however, in ST/X the view and controller
				functionality is combined in the view).
				This example shows how buttons can use models.

	Model-Simple2           a selectionInListView with a model

	Model-Simple3           buttons and a popUpList with a model

	Model-Label.st          a label and a model

	Process-examples        simple process examples showing fork, newProcess etc)

	Process-delay           shows use of Delay and process forking

	Process-diningTable     the standard philosopher example using Semaphores

	Process-philosopher     (load both, start with: "(DiningTable new:5) dinner")

	Process-philosopher2    example on how to prevent the (possible) deadlock in Philosopher

	Process-sharedQueue     shows use of processes and shared queues

	Registry-example        shows use of Registry to track object reclamation by
				the garbage collector (i.e. finalization).

	Signal-handling         examples on how Signal, Exception and SignalSet
				are used (study this one carefully - its nice)

	Signal-floatSignals     floating point errors and handling

	Signal-stackoverflow    examples on how stack overflow can be handled

	Socket-connection       use of Sockets (code fragments)

	Socket-objectcopy       how objects can be sent via a socket connection using
				binaryStore (code fragments)

	Special-hereSend        local sends - an ST/X special feature

	View-ButtonDemoXX       using Buttons (tutorial examples)

	View-ExampleXX          various views, views-in-views etc.
				with growing complexity (tutorial examples).
				(start with example1x, example2, and so on)

	View-FrameXX            more views showing use of frames (tutorial examples)

	View-HelloWorld         hello world in smalltalk
				(no language without its hello-world program ... :-)
				This example creates a new View subclass, i.e. it
				does not use existing widgets, but defines a
				new 'hello-world' widget.

	View-HelloWorld2        same, but using the existing Label widget.

	View-16bit-strings      example, how 16bit strings are drawn in a view

	View-16bit-labels       demonstrates that labels can handle 16bit strings.
	View-16bit-buttons      and buttons too

	View-PanelXX            more views showing use of panels
				(variableVertical & variableHorizontal)

	View-drawing-arc        shows how arcs are drawn
	View-drawing-arc2       more on drawing arcs
	View-drawing-arc3       more on drawing arcs (varying lineWidth)
	View-drawing-arc4       more on drawing arcs (varying lineWidth and color)
	View-drawing-filledarc  shows filled arcs
	View-drawing-filledarc2 filled arcs as in pie charts (i.e. arcs, lines & filled arcs)

	View-PopUpMenu-simple   how to define a very simple popup-menu
	View-PopUpMenu-check    how to define a popup-menu with check-marks
	View-PopUpMenu-submenus how to define a more complex popup-menu (with submenus)

	View-Slider-example1    a simple horizontal slider
	View-Slider-example2    a simple, thin horizontal slider
	View-Slider-example3    a thin horizontal slider showing its value
	View-Slider-example4    same, but value is shown under sliders knob

	View-border-round       a round-bordered view

	View-border-funny       a very funny shaped view - transparent, using an image
				as border (you never saw this before in smalltalk !)

	View-transformations    various demos for how transformations can be used
				when drawing (metric units, scaling etc.)

	libfoo_example          source for the example in the
				online documentation 'How to compile ...'

	libfoo2_example         like above, but C-functions are defined
				privately in the CInterface class

