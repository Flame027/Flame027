"
 COPYRIGHT (c) 2006 by eXept Software AG
              All Rights Reserved

 This software is furnished under a license and may be used
 only in accordance with the terms of that license and with the
 inclusion of the above copyright notice.   This software may not
 be provided or otherwise made available to, or used by, any
 other person.  No title to or ownership of the software is
 hereby transferred.
"
"{ Package: 'stx:libdb' }"

"{ NameSpace: SQL }"

Object subclass:#DatabaseRowObject
	instanceVariableNames:''
	classVariableNames:''
	poolDictionaries:''
	category:'DataBase-SQL-Framework'
!

!DatabaseRowObject class methodsFor:'documentation'!

copyright
"
 COPYRIGHT (c) 2006 by eXept Software AG
              All Rights Reserved

 This software is furnished under a license and may be used
 only in accordance with the terms of that license and with the
 inclusion of the above copyright notice.   This software may not
 be provided or otherwise made available to, or used by, any
 other person.  No title to or ownership of the software is
 hereby transferred.
"
!

documentation
"
    ODBCDataObject is the abstract superclass of row objects created by a cursor.

    The subclasses of ODBCDataObject allow access to row objects through generating an interface 
    based on the names of the column descriptors in the original SELECT statement. Single getter and setter
    methods are generated upon creation of a subclass and multi-setter methods are generated at run time.

    A cache of data objects classses are held in each session for performance reasons.

    [author:]
        james (james@CHANTI)

    [instance variables:]

    [class variables:]

    [see also:]
"
! !

!DatabaseRowObject class methodsFor:'instance creation'!

fromArray:anArray
    "create an instance of myself based on anArray"

    |mySize inst|

    mySize := self instSize.
    "make sure, that a new Array is created!!"
    inst := Array new:mySize.
    inst
        replaceFrom:self superclass instSize+1 to:mySize with:anArray startingAt:1;
        changeClassTo:self.

    ^ inst.

    "
        self fromArray:#()
        (self subclassForNames:#(name sex age)) fromArray:#('stefan' 'm' 40)
    "
! !

!DatabaseRowObject class methodsFor:'subclass generation'!

subclassForNames:names
    "create a row-specific, anonymous class for a row object,
     which allows for named access to the columns.
     names has to be an array of symbols."

    |meta cls namesSize methodDict|

    namesSize := names size.
    methodDict := MethodDictionary new:namesSize*2.

    meta := Metaclass new.
    meta setSuperclass:self class.

    cls := meta new
        setSuperclass:self
        methodDictionary:methodDict
        instSize:namesSize + self instSize
        flags:Behavior flagBehavior;
        setName:#SomeDatabaseRowObjectSubclass;
        comment:'Dynamically generated by DatabaseRowObject>>#subclassForNames: (anonymous - not globally known).';
        setInstVarNamesArray:names.

    names do:[:eachInstVarName |
        |m|

        m := Compiler 
                    compile:(eachInstVarName , '
    ^ ', eachInstVarName)
                    forClass:cls
                    install:false.
        m 
            mclass:cls;
            setCategory:#accessing.

        "/ can set methodDictionary directly (without flushing caches),
        "/ because this is a new class, which has never been instantiated
        "/ (therefore, no caches refer to this class yet).
        methodDict at:eachInstVarName asSymbol put:m.

        m := Compiler 
                    compile:(eachInstVarName, ':anObject', '
    ', eachInstVarName, ' := anObject')
                    forClass:cls
                    install:false.
        m
            mclass:cls;
            setCategory:#accessing.
        methodDict at:(eachInstVarName,':') asSymbol put:m.
    ].
    ^ cls

    "
      self subclassForNames:#(name sex age)
    "

    "Created: / 17-07-2006 / 13:06:19 / cg"
! !

!DatabaseRowObject methodsFor:'accessing'!

at:aName
    "Dictionary compatibility. Answer the instvar names aName."

    ^ self instVarNamed:aName
!

at:aName ifAbsent:aBlock
    "Dictionary compatibility. Answer the instvar names aName."

    ^ self instVarNamed:aName ifAbsent:aBlock
!

atIndex:index
    "OrderedDictionary compatibility. Answer the instvar at index index."

    ^ self instVarAt:index
! !

!DatabaseRowObject methodsFor:'adaption'!

doesNotUnderstand:aMessage
    |keywords headerStream bodyStream instVars|
    keywords := aMessage selector keywords.
    headerStream := '' writeStream.
    bodyStream := '' writeStream.
    instVars := self class instanceVariableNames.
    keywords do:[:aKeyword |
        |withoutColon|
        withoutColon := aKeyword copyButLast:1.
        (instVars includes:withoutColon) ifFalse:[
            ^ super doesNotUnderstand:aMessage.
        ].
        headerStream nextPutAll:aKeyword, '_', withoutColon.
        headerStream space.

        bodyStream nextPutAll:withoutColon, ':=_', withoutColon.
        bodyStream nextPut:$..
    ].
    headerStream nextPutAll:bodyStream contents.
    self class 
        compile:headerStream contents 
        classified:#'adapted accessors'
        logged:false.

    ^ aMessage sendTo:self.

    "
        |cls inst|
        cls := self subclassForNames:#(name sex age).
        inst := cls fromArray:#('stefan' $m 52)
    "
! !

!DatabaseRowObject methodsFor:'conversion'!

asArray
    ^ self shallowCopy changeClassTo:Array.
! !

!DatabaseRowObject methodsFor:'printing & storing'!

printOn:aStream

    aStream nextPutAll:'DatabaseRowObject('.

    self class instVarNames do:[:eachInstVarName|
        aStream
            space
            nextPutAll:eachInstVarName;
            nextPutAll:'->'.
        (self perform:eachInstVarName asSymbol) printOn:aStream.
    ] separatedBy:[aStream cr].

    aStream nextPut:$).
! !

!DatabaseRowObject class methodsFor:'documentation'!

version
    ^ '$Header: /cvs/stx/stx/libdb/SQL__DatabaseRowObject.st,v 1.14 2016-07-06 14:38:29 mawalch Exp $'
!

version_CVS
    ^ '$Header: /cvs/stx/stx/libdb/SQL__DatabaseRowObject.st,v 1.14 2016-07-06 14:38:29 mawalch Exp $'
! !

