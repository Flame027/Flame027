"{ NameSpace: Demos }"

ApplicationModel subclass:#ExampleAdabas
	instanceVariableNames:'persDB loadedKeys modifiedRows rowSet rowSetStart statement'
	classVariableNames:''
	poolDictionaries:''
	category:'examples-adabas'
!

Object subclass:#Row
	instanceVariableNames:'key table modified rawData'
	classVariableNames:'modifiedBackgroundColor'
	poolDictionaries:''
	privateIn:ExampleAdabas
!


!ExampleAdabas class methodsFor:'constants'!

dataBaseName
    ^ ':MYDB'
!

password
    ^'demo'
!

user
    ^'demo'
! !

!ExampleAdabas class methodsFor:'interface specs'!

windowSpec
    "this window spec was automatically generated by the ST/X UIPainter"

    "do not manually edit this - the painter/builder may not be able to
     handle the specification if its corrupted."

    "
     UIPainter new openOnClass:CodingExamples::ExampleAdabas andSelector:#windowSpec
     CodingExamples::ExampleAdabas new openInterface:#windowSpec
    "
    "CodingExamples::ExampleAdabas open"

    <resource: #canvas>

    ^
     
       #(#FullSpec
	  #'window:' 
	   #(#WindowSpec
	      #'name:' 'DataSet Example DB'
	      #'layout:' #(#LayoutFrame 216 0 173 0 677 0 443 0)
	      #'label:' 'DataSet Example DB'
	      #'min:' #(#Point 10 10)
	      #'max:' #(#Point 1152 900)
	      #'bounds:' #(#Rectangle 216 173 678 444)
	      #'usePreferredExtent:' false
	  )
	  #'component:' 
	   #(#SpecCollection
	      #'collection:' 
	       #(
		 #(#DataSetSpec
		    #'name:' 'dataSet'
		    #'layout:' #(#LayoutFrame 0 0.0 0 0.0 0 1.0 -30 1.0)
		    #'model:' #selectionHolder
		    #'hasHorizontalScrollBar:' true
		    #'hasVerticalScrollBar:' true
		    #'rowIfAbsent:' #'retrieveRowAt:'
		    #'dataList:' #listHolder
		    #'has3Dsepartors:' true
		    #'columns:' 
		     #(
		       #(#DataSetColumnSpec
			  #'label:' 'Name'
			  #'minWidth:' 100
			  #'editorType:' #InputField
			  #'model:' #name
			  #'backgroundSelector:' #modifiedBackgroundColor
		      )
		       #(#DataSetColumnSpec
			  #'label:' 'Employee Number'
			  #'minWidth:' 100
			  #'editorType:' #InputField
			  #'model:' #employeeNumber
			  #'backgroundSelector:' #modifiedBackgroundColor
		      )
		       #(#DataSetColumnSpec
			  #'label:' 'German Citizen'
			  #'editorType:' #CheckToggle
			  #'rendererType:' #CheckToggle
			  #'model:' #isGerman
			  #'backgroundSelector:' #modifiedBackgroundColor
		      )
		    )
		)
		 #(#HorizontalPanelViewSpec
		    #'name:' 'panel'
		    #'layout:' #(#LayoutFrame 0 0.0 -30 1.0 0 1.0 0 1.0)
		    #'component:' 
		     #(#SpecCollection
			#'collection:' 
			 #(
			   #(#ActionButtonSpec
			      #'name:' 'recoverButton'
			      #'label:' 'recover'
			      #'model:' #'changes:'
			      #'enableChannel:' #modifiedChannel
			      #'actionValue:' 'recover'
			      #'extent:' #(#Point 226 24)
			  )
			   #(#ActionButtonSpec
			      #'name:' 'commitButton'
			      #'label:' 'commit'
			      #'model:' #'changes:'
			      #'enableChannel:' #modifiedChannel
			      #'actionValue:' 'commit'
			      #'extent:' #(#Point 227 24)
			  )
			)
		    )
		    #'horizontalLayout:' #fitSpace
		    #'verticalLayout:' #fitSpace
		    #'horizontalSpace:' 3
		    #'verticalSpace:' 3
		)
	      )
	  )
      )
! !

!ExampleAdabas class methodsFor:'test'!

createDataBase
"
ExampleAdabas createDataBase
"

    |connection statement message|

    OdbcObject clearOdbc.
    OdbcObject instanciateOdbcLibrary.
    connection := OdbcConnection openTraceBoxOn.
    connection setTraceBoxOn.
    connection connect:':MYDB' userId:'demo' password:'demo'.
    (connection hasError) ifTrue:[
        connection error.
        message := connection popWarningBox:'Could not Connect!!\'.
    ] ifFalse:[
        statement := connection newStatement.
        statement executeDirect:'DROP TABLE TABLE1'.
        statement executeDirect:'CREATE TABLE TABLE1 (ID INTEGER, NAME VARCHAR(25), ISGERMAN BOOLEAN)'.
        connection transact:#SQL_COMMIT.
        statement prepare:'INSERT INTO TABLE1 VALUES (?, ?, ?)'.

        statement paramOptions:100.
        statement bindParameter:1 fParamType:#SQL_PARAM_INPUT fSqlType:#SQL_SMALLINT maxSize:4.
        statement bindParameter:2 fParamType:#SQL_PARAM_INPUT fSqlType:#SQL_CHAR     maxSize:512.
        statement bindParameter:3 fParamType:#SQL_PARAM_INPUT fSqlType:#SQL_BIT      maxSize:1.

        connection setConnectionOption:#SQL_AUTOCOMMIT vParam:#SQL_AUTOCOMMIT_OFF.

        1 to:500 do:[ :outerIndex |
            1 to:100 do:[ :innerIndex |
                statement parmValue:1 at:innerIndex put:(((outerIndex - 1) * 100) + innerIndex).
                statement parmValue:2 at:innerIndex put:('test entry #', (((outerIndex - 1) * 100) + innerIndex) printString).
                statement parmValue:3 at:innerIndex put:(innerIndex \\ 2).
            ].
            statement execute.
            connection transact:#SQL_COMMIT.
        ].
        connection setConnectionOption:#SQL_AUTOCOMMIT vParam:#SQL_AUTOCOMMIT_ON.

        statement drop.
        connection disconnect.
    ].
    connection free.
! !

!ExampleAdabas methodsFor:'actions'!

changes:what

    |list view|

    view := builder componentAt:#dataSet.
    view deselect.
    list := self listHolder.

    what = 'commit' ifTrue:[ 
	modifiedRows do:[:r|r storeTo:persDB] ].
	statement isNil ifFalse:[
	    statement drop.
	    statement := nil.
	    rowSet := nil.
	    rowSetStart := nil.
	].
    modifiedRows do:[:r| list at:(r key) put:nil ].
    modifiedRows := OrderedCollection new.
    view forceRedraw.
    self modifiedChannel value:false.
!

retrieveRowAt:aRowNr
"
    |list row|

    list := self listHolder.

    loadedKeys size > 5000 ifTrue:[
	loadedKeys from:1 to:100 do:[:i| list at:i put:nil ].
	loadedKeys removeFromIndex:1 toIndex:100.
    ].
    row := Row key:aRowNr table:self.
    row retrieveFrom:persDB.
    loadedKeys add:aRowNr.
  ^ list at:aRowNr put:row.
"

    |row list numOfRows backwardSearchKey position fetchKey retrieveSize|

    list := self listHolder.
    persDB isNil ifTrue:[^ nil].
    retrieveSize := 500.
    backwardSearchKey := nil.

    rowSet isNil ifFalse:[
	((aRowNr - rowSetStart) >= 0) ifTrue:[
	    ((aRowNr - rowSetStart) < retrieveSize) ifTrue:[
		row := Row key:aRowNr table:self.
		position := 1 + aRowNr - rowSetStart.
		row name:(rowSet at:position column:2) number:(rowSet at:position column:1) isGerman:(rowSet at:position column:3).
		loadedKeys add:aRowNr.
		^ list at:aRowNr put:row.
	    ].
	] ifFalse:[
	    (aRowNr ~= 1) & ((aRowNr - rowSetStart) abs < retrieveSize) ifTrue:[
		backwardSearchKey := aRowNr -  (retrieveSize / 2). 
		(backwardSearchKey < 1) ifTrue:[backwardSearchKey := 1].
	    ].
	].
    ]. 
    statement isNil ifTrue:[
	statement := persDB newStatement.
	statement setStatementOption:#SQL_CONCURRENCY vParam:#SQL_CONCUR_READ_ONLY.
	statement setStatementOption:#SQL_CURSOR_TYPE vParam:#SQL_CURSOR_KEYSET_DRIVEN.
	statement setStatementOption:#SQL_ROWSET_SIZE vParam:retrieveSize.
	statement executeDirect:'SELECT ID, NAME, ISGERMAN FROM TABLE1'.
	statement bindColumnsToDefault.
    ].

    loadedKeys size > (5 * retrieveSize) ifTrue:[
	loadedKeys from:1 to:retrieveSize do:[:i| list at:i put:nil ].
	loadedKeys removeFromIndex:1 toIndex:retrieveSize.
    ].

    backwardSearchKey isNil ifFalse:[
	position := 1 + aRowNr - backwardSearchKey.
	fetchKey := backwardSearchKey.
    ] ifTrue:[
	position := 1.
	fetchKey := aRowNr.
    ].
    numOfRows := statement extendedFetch:#SQL_FETCH_ABSOLUTE irow:fetchKey.

    statement successful | statement successfulWithInfo ifTrue:[
	rowSet := statement rowset.
	rowSetStart := fetchKey.
	row := Row key:aRowNr table:self.
	row name:(rowSet at:position column:2) number:(rowSet at:position column:1) isGerman:(rowSet at:position column:3).
	loadedKeys add:aRowNr.
	^ list at:aRowNr put:row.
    ].
    ^ nil
! !

!ExampleAdabas methodsFor:'aspects'!

listHolder
    "automatically generated by UIPainter ..."

    |holder size|

    (holder := builder bindingAt:#listHolder) isNil ifTrue:[
	self openDataBase ifFalse:[
	    size := 0
	] ifTrue:[
	    size := 47916.
	].
	holder := List new:size.
	holder addAll:(Array new:size).
	builder aspectAt:#listHolder put:holder.
    ].
    ^ holder
!

modifiedChannel
    "automatically generated by UIPainter ..."

    |holder|

    (holder := builder bindingAt:#modifiedChannel) isNil ifTrue:[
	builder aspectAt:#modifiedChannel put:(holder :=  ValueHolder new).
    ].
    ^ holder
!

selectionHolder
    "automatically generated by UIPainter ..."

    |holder|

    (holder := builder bindingAt:#selectionHolder) isNil ifTrue:[
	builder aspectAt:#selectionHolder put:(holder :=  ValueHolder new).
    ].
    ^ holder
! !

!ExampleAdabas methodsFor:'change & update'!

modified:changedRow
    |rowNr|

    self modifiedChannel value:true.
    modifiedRows add:changedRow.
    rowNr := changedRow key.

    loadedKeys removeIdentical:rowNr ifAbsent:nil.
    (builder componentAt:#dataSet) redrawRowAt:rowNr
! !

!ExampleAdabas methodsFor:'initialization'!

closeRequest
    persDB notNil ifTrue:[
	statement isNil ifFalse:[
	    statement drop.
	].
	persDB disconnect.
	persDB free.
    ].
    super closeRequest.
! !

!ExampleAdabas methodsFor:'private'!

openDataBase

    |message|

    persDB isNil ifTrue:[
	OdbcObject clearOdbc.
	OdbcObject instanciateOdbcLibrary.
	persDB := OdbcConnection openTraceBoxOn.
	persDB connect:(self class dataBaseName) userId:(self class user) password:(self class password).
	(persDB hasError) ifTrue:[
	    persDB error.
	    message := persDB popWarningBox:'Could not Connect!!\'.
	    ^ false
	] ifFalse:[
	    loadedKeys   := OrderedCollection new.
	    modifiedRows := OrderedCollection new.
	].
    ].
    ^ persDB notNil
! !

!ExampleAdabas::Row class methodsFor:'defaults'!

modifiedBackgroundColor

    ModifiedBackgroundColor isNil ifTrue:[
	ModifiedBackgroundColor := Color grey
    ].
    ^ ModifiedBackgroundColor
! !

!ExampleAdabas::Row class methodsFor:'instance creation'!

key:aKey table:aTable
    ^ self new key:aKey table:aTable
!

new
    ^ self basicNew initialize
! !

!ExampleAdabas::Row methodsFor:'accessing colors'!

modifiedBackgroundColor
    "returns background color for a cell; if row is modified a color
     is returned otherwise nil (useing default background color)
    "
    ^ modified ifFalse:[nil] ifTrue:[self class modifiedBackgroundColor]

! !

!ExampleAdabas::Row methodsFor:'accessing readSelector'!

employeeNumber
    "automatically generated by DataSetBuilder ..."

    ^ rawData at:2
!

isGerman
    "automatically generated by DataSetBuilder ..."

    |t|


    t := rawData at:3.
    (t == true or:[t == false]) ifFalse:[self halt].
    ^ rawData at:3
!

name
    "automatically generated by DataSetBuilder ..."

    ^ rawData at:1
! !

!ExampleAdabas::Row methodsFor:'accessing writeSelector'!

employeeNumber:aValue
    "automatically generated by DataSetBuilder ..."

    self at:2 put:aValue
!

isGerman:aValue
    "automatically generated by DataSetBuilder ..."

    self at:3 put:aValue

!

name:aValue
    "automatically generated by DataSetBuilder ..."

    self at:1 put:aValue

! !

!ExampleAdabas::Row methodsFor:'initialize'!

initialize
    super initialize.
    rawData  := Array new:3.
    modified := false.
!

key:aKey table:aTable

    key   := aKey.
    table := aTable.
!

name:aName number:aNumber isGerman:aBool

    rawData  := Array with:aName with:aNumber with:aBool.
    modified := false.
! !

!ExampleAdabas::Row methodsFor:'persistency'!

key
    ^ key
!

retrieveFrom:connection
    "read data from database"
    "Actually, for ODBC create a statement for a connection,
	and execute it. Then put the data in the row."

    Object keyNotFoundSignal handle:[:ex| ex return]
				 do:[ 
					"rawData := aDB retrieve:key"
                                        
    |row statement|

    connection isNil ifTrue:[^ nil].

    statement := connection newStatement.
    statement executeDirect:'SELECT ID, NAME, ISGERMAN FROM TABLE1 WHERE ID = ', key printString.
    statement bindColumnsToDefault.
    statement fetch.
    statement successful | statement successfulWithInfo ifTrue:[
	row := statement row.
	rawData := Array with:(row at:#NAME) with:(row at:#ID) with:(row at:#ISGERMAN).
    ].        
				    ].
    modified := false.
!

storeTo:aDataBase
    "store to database
    "
"    aDataBase store:rawData key:key sync:false. "
    |tempWriteStatement|

    aDataBase isNil ifTrue:[^ nil].

    tempWriteStatement := aDataBase newStatement.
    tempWriteStatement executeDirect:'UPDATE TABLE1 SET name = ''',(self name), ''', isgerman = ',(self isGerman storeString), ' WHERE id = ', (self employeeNumber) printString.
    tempWriteStatement drop.
    modified := true.

"
    |row list name id result tempWriteStatement|

    persistencyMgr isNil ifTrue:[^ nil].

    name := aRow name.
    id   := aRow id.

    tempWriteStatement := persistencyMgr newStatement.
    tempWriteStatement executeDirect:'UPDATE TABLE1 SET name = ''', name, ''' WHERE id = ', id printString.
    (tempWriteStatement hasError) ifTrue:[
	tempWriteStatement getErrors.
    ].

    transactionStmtSet isNil ifTrue:[transactionStmtSet := OrderedCollection new].
    transactionStmtSet add:tempWriteStatement.
"
! !

!ExampleAdabas::Row methodsFor:'private'!

at:anIndex put:something

    (rawData at:anIndex) = something ifFalse:[
	rawData at:anIndex put:something.

	modified ifFalse:[
	    modified := true.
	    table modified:self
	]
    ]
!

raiseModification

    modified ifFalse:[
	modified := true.
	table modified:self.
    ]
! !

!ExampleAdabas class methodsFor:'documentation'!

version
    ^ '$Header: /cvs/stx/stx/libdb/libodbc/ExampleAdabas.st,v 1.4 1999-12-23 17:06:23 cg Exp $'
! !
